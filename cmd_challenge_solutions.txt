on https://cmdchallenge.com/

challenge "search_for_files_containing_string" : List the name of file that contains "500" in the current
directory, note the path
# option r : recursivity
# argument '.' : current directory
# command cut : starting the 3rd character, show the rest of each string
> fgrep -lr '500' . | cut -c 3-


challenge "search_for_files_by_extension" : Print the relative file paths, one path per line for all
filenames that start with "access.log" in the current directory
> ls -d access.log*

challenge "search_for_string_in_files_recursive" : Print all matching lines (without the filename
or the file path) in all files under the current directory that start with "access.log" that contain
the string "500". Note that there are no files named "access.log" in the current directory, you will 
need to search recursively.
> for file in `find -name access.log*`; do grep -R -h 500 $file;done
# On peut utiliser une boucle for en commande !!!!!!!

challenge "extract_ip_addresses" : Extract all IP addresses from files that start with "access.log" 
# printing one IP address per line.
# find /var -name "access.log*" : affiche les chemins des fichiers access.log*
# cut -d " " -f 1 filename : affiche l'élément 1 de chaque ligne; la sépration des éléments est " "
> for file in `find -name access.log*`; do cut -d " " -f 1 $file;done

//////////////////////////////////////////////////////////////////////////////////////////////////////

challenge "delete_files" : 
# Delete all files and directories
> rm -r /*

challenge "count_files" : 
# Count all files in current directory
> ls -A | wc -l

challenge "simple_sort" : 
# Print the contents of access.log sorted.
> sort access.log

challenge "count_string_in_line" : 
#Print the number of lines in access.log that contain the string "GET".
> grep "GET" access.log | wc -l

challenge "split on a char" :
# The file split-me.txt contains a list of numbers separated by a ';' character.
# Split the numbers on the ';' character, one number per line.
# tr ';' '\n' < split-me.txt : change les ; en saut à la ligne
> cat split-me.txt|tr ";" "\n "

challenge "print_number_sequence" :
# print the number 1 to 100 separated by spaces
# for i in $( seq 1 100 ); do printf "%d " "$i"; done // fonctionne mais non validé
> echo {1..100} //////// je me complique la viiiieeeee

challenge "remove_files_with_extension" :
# There are files in this challenge with different file extensions.
# Remove all files with the .doc extension recursively in the current working directory.
> find . -name "*.doc" -type f -delete

challenge "replace_text_in_files"
# This challenge has text files (with a .txt extension) that contain the phrase "challenges are difficult".
# Delete this phrase recursively from all text files. Note that some files are in subdirectories so you will
# need to search for them
# $(find . -name "*.txt" -exec grep "challenges are difficult" '{}' \; -print) // affiche le contenu des fichiers
> sed -i -- 's/challenges are difficult//'   ///// info : s/word// is a simple regex that says replace word with <blank>
> find . -name "*.txt" -type f -print //affiche le chemin des fichiers

> sed -i -- 's/challenges are difficult//' $(find . -name "*.txt" -type f -print)
	problème : les dossiers ont un espace séparant les noms donc sed ne trouve pas le chemin
> for i in ./**/*.txt; do sed -i "s/challenges are difficult//g" "$i"; done

challenge "sum_all_numbers"
# The file sum-me.txt has a list of numbers, one per line. Print the sum of these numbers.
# awk is a programming langage and gawk is its implementation on GNU
> awk '{ sum += $1 }; END { print sum }' sum-me.txt

challenge "just_the_files"
# Print all files in the current directory recursively without the leading directory path.
# Not a solution : print file's name : ls -p | grep -v /
# Recursive means that Linux or Unix command works with the contains of directories, and if a directory has subdirectories 
# and files, the command works on those files too (recursively). 
> find . -type f -exec basename {} \;
# Basename is a command that returns only the name of a file, without its path

challenge "remove_extensions_from_files"
# Rename all files removing the extension from them in the current directory recursively.
# Command rename or mv
